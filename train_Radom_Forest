#!/usr/bin/env python3
# -*- coding: utf-8 -*-


"""
Random Forest classification of 100×100 PNG spectrograms.
Train/test directories each contain one subfolder per class.
Outputs F2 score, classification report, and confusion matrix.
"""

import os
import numpy as np
from PIL import Image
from sklearn.utils import shuffle
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import fbeta_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt

def load_dataset(root_dir):
    """
    Load flattened RGB image arrays and integer labels from a directory:
      root_dir/
        class1/*.png
        class2/*.png
    Returns:
      X (n_samples, n_features), y (n_samples,), labels (list of class names).
    """
    X, y = [], []
    labels = sorted(
        d for d in os.listdir(root_dir)
        if os.path.isdir(os.path.join(root_dir, d))
    )
    label_to_idx = {label: idx for idx, label in enumerate(labels)}
    for label in labels:
        folder = os.path.join(root_dir, label)
        for fname in os.listdir(folder):
            if not fname.lower().endswith('.png'):
                continue
            img = Image.open(os.path.join(folder, fname)).convert('RGB')
            arr = np.array(img, dtype=np.uint8).flatten()
            X.append(arr)
            y.append(label_to_idx[label])
    return np.stack(X, axis=0), np.array(y, dtype=int), labels

def plot_confusion_matrix(cm, labels):
    """
    Display a confusion matrix with labels on axes.
    """
    plt.figure(figsize=(8, 6))
    plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)
    plt.title('Confusion Matrix')
    plt.colorbar()
    tick_marks = np.arange(len(labels))
    plt.xticks(tick_marks, labels, rotation=45)
    plt.yticks(tick_marks, labels)
    plt.xlabel('Predicted label')
    plt.ylabel('True label')
    plt.tight_layout()
    plt.show()

def main():
    # === Configure your paths ===
    train_dir = '/home/shakib/Desktop/S4/machine_learning/mini_projet/biodcase_development_set/final_train/train'
    test_dir  = '/home/shakib/Desktop/S4/machine_learning/mini_projet/biodcase_development_set/final_train/test'
    # ============================

    # 1) Load train and test sets
    print("Loading training data from:", train_dir)
    X_train, y_train, labels = load_dataset(train_dir)
    print(f"  → {X_train.shape[0]} samples, {len(labels)} classes")

    print("Loading test data from:", test_dir)
    X_test, y_test, _ = load_dataset(test_dir)
    print(f"  → {X_test.shape[0]} samples\n")

    # 2) Shuffle training set
    X_train, y_train = shuffle(X_train, y_train, random_state=42)

    # 3) Initialize Random Forest classifier
    clf = RandomForestClassifier(
        n_estimators=100,
        criterion='gini',
        max_depth=None,
        n_jobs=-1,
        random_state=42,
        verbose=1                  # prints progress of tree building
    )

    # 4) Train
    print("Training Random Forest classifier...")
    clf.fit(X_train, y_train)

    # 5) Predict on test set
    print("\nPredicting on test set...")
    y_pred = clf.predict(X_test)

    # 6) Compute F2 score (macro-average)
    f2 = fbeta_score(y_test, y_pred, beta=2, average='macro')
    print(f"\nF2 score (macro-average): {f2:.4f}")

    # 7) Classification report
    print("\nClassification Report:")
    print(classification_report(y_test, y_pred, target_names=labels, digits=4))

    # 8) Confusion matrix
    cm = confusion_matrix(y_test, y_pred)
    plot_confusion_matrix(cm, labels)

if __name__ == "__main__":
    main()

